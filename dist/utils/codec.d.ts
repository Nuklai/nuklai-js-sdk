import { Id } from '@avalabs/avalanchejs';
import { Address } from './address';
declare class Codec {
    private buffer;
    private offset;
    private maxSize;
    private error?;
    constructor(bytes?: Uint8Array, maxSize?: number);
    static newWriter(initialBufferSize: number, maxSize: number): Codec;
    static newReader(bytes: Uint8Array, maxSize: number): Codec;
    private checkSpace;
    private expand;
    packByte(value: number): void;
    unpackByte(): number;
    packShort(value: number): void;
    unpackShort(): number;
    packInt(value: number): void;
    unpackInt(): number;
    packLong(value: bigint): void;
    unpackLong(): bigint;
    packBool(value: boolean): void;
    unpackBool(): boolean;
    packFixedBytes(bytes: Uint8Array): void;
    unpackFixedBytes(size: number): Uint8Array;
    packBytes(bytes: Uint8Array): void;
    unpackBytes(): Uint8Array;
    unpackLimitedBytes(limit: number): Uint8Array;
    packStr(value: string): void;
    unpackStr(): string;
    unpackLimitedStr(limit: number): string;
    packID(id: Id): void;
    unpackID(required: boolean): Id;
    packUint64(value: bigint): void;
    unpackUint64(required: boolean): bigint;
    packInt64(value: bigint): void;
    unpackInt64(required: boolean): bigint;
    packString(value: string): void;
    unpackString(required: boolean): string;
    packAddress(address: Address): void;
    unpackAddress(): Address;
    toBytes(): Uint8Array;
    getOffset(): number;
    hasError(): boolean;
    getError(): Error | undefined;
    addError(err: Error): void;
    empty(): boolean;
}
export { Codec };
